// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String              @id @default(uuid())
  phone             String              @unique
  password          String
  firstName         String
  lastName          String
  email             String              @unique
  status            UserStatus          @default(PENDING)
  roles             Role[]              @relation("UserRoles")
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  bids              Bid[]
  auctioneerProfile AuctioneerProfile?
  paidParticipation Boolean             @default(false)
  paidDeposit       Boolean             @default(false)
  paymentMethod     PaymentMethod?
  receiptUrl        String?
}

model Role {
  id    String @id @default(uuid())
  name  RoleName @unique
  users User[]   @relation("UserRoles")
}

model AuctioneerProfile {
  id             String            @id @default(uuid())
  userId         String            @unique
  user           User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  companyName    String
  address        String
  tempPassword   String?
  auctionItems   AuctionItem[]
  messageTemplates MessageTemplate[]
  communicationLogs CommunicationLog[]
}

model Category {
  id           String        @id @default(uuid())
  name         String        @unique
  auctionItems AuctionItem[]
}

model AuctionItem {
  id               String            @id @default(uuid())
  name             String
  description      String            @db.Text
  startingPrice    Float
  startDate        DateTime
  endDate          DateTime
  type             AuctionItemType
  minIncrement     Float?
  maxAllowedValue  Float?
  participationFee Float?
  securityDeposit  Float?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  categoryId       String
  category         Category          @relation(fields: [categoryId], references: [id])
  auctioneerId     String
  auctioneer       AuctioneerProfile @relation(fields: [auctioneerId], references: [id])
  bids             Bid[]
  images           Image[]
}

model Image {
  id            String      @id @default(uuid())
  url           String
  hint          String?
  auctionItemId String
  auctionItem   AuctionItem @relation(fields: [auctionItemId], references: [id], onDelete: Cascade)
}

model Bid {
  id            String      @id @default(uuid())
  amount        Float
  createdAt     DateTime    @default(now())
  auctionItemId String
  auctionItem   AuctionItem @relation(fields: [auctionItemId], references: [id], onDelete: Cascade)
  bidderId      String
  bidder        User        @relation(fields: [bidderId], references: [id])
}

model CommunicationLog {
  id String @id @default(uuid())
  auctionId String
  auctionName String
  templateName String
  channel CommunicationChannel
  recipientsCount Int
  sentAt DateTime @default(now())
  auctioneerId String
  auctioneer AuctioneerProfile @relation(fields: [auctioneerId], references: [id])
}

model MessageTemplate {
  id String @id @default(uuid())
  name String
  channel CommunicationChannel
  template String @db.Text
  auctioneerId String
  auctioneer AuctioneerProfile @relation(fields: [auctioneerId], references: [id])

  @@unique([name, auctioneerId])
}

enum RoleName {
  SUPER_ADMIN
  AUCTIONEER
  BIDDER
}

enum UserStatus {
  PENDING
  APPROVED
  BLOCKED
}

enum AuctionItemType {
  LIVE
  SEALED
}

enum PaymentMethod {
  DIRECT
  RECEIPT
}

enum CommunicationChannel {
  email
  sms
}
