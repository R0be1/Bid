
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String   @id @default(cuid())
  phone             String   @unique
  password          String?
  firstName         String
  lastName          String
  email             String   @unique
  status            UserStatus @default(PENDING)
  roles             Role[]   @relation()
  bids              Bid[]
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Fields for bidder payment tracking
  paidParticipation Boolean @default(false)
  paidDeposit       Boolean @default(false)
  paymentMethod     PaymentMethod?
  receiptUrl        String?

  // Relation to AuctioneerProfile
  auctioneerProfile   AuctioneerProfile?
}

model Role {
  id    String   @id @default(cuid())
  name  RoleName @unique
  users User[]   @relation()
}

model AuctioneerProfile {
  id            String   @id @default(cuid())
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id])
  companyName   String
  address       String
  tempPassword  String?
  auctionItems  AuctionItem[]
}

model Category {
  id           String        @id @default(cuid())
  name         String        @unique
  auctionItems AuctionItem[]
}

model AuctionItem {
  id                String         @id @default(cuid())
  name              String
  description       String
  startingPrice     Float
  startDate         DateTime
  endDate           DateTime
  type              AuctionItemType
  minIncrement      Float?
  maxAllowedValue   Float?
  participationFee  Float?
  securityDeposit   Float?
  
  categoryId        String
  category          Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  auctioneerId      String
  auctioneer        AuctioneerProfile @relation(fields: [auctioneerId], references: [id], onDelete: Cascade)

  images            Image[]
  bids              Bid[]

  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
}

model Image {
  id            String      @id @default(cuid())
  url           String
  hint          String?
  auctionItemId String
  auctionItem   AuctionItem @relation(fields: [auctionItemId], references: [id], onDelete: Cascade)
}

model Bid {
  id            String      @id @default(cuid())
  amount        Float
  createdAt     DateTime    @default(now())
  
  auctionItemId String
  auctionItem   AuctionItem @relation(fields: [auctionItemId], references: [id], onDelete: Cascade)
  
  bidderId      String
  bidder        User        @relation(fields: [bidderId], references: [id], onDelete: Cascade)
}

enum RoleName {
  SUPER_ADMIN
  AUCTIONEER
  BIDDER
}

enum UserStatus {
  PENDING
  APPROVED
  BLOCKED
}

enum AuctionItemType {
  LIVE
  SEALED
}

enum PaymentMethod {
  DIRECT
  RECEIPT
}
