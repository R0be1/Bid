
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String            @id @default(uuid())
  firstName         String
  lastName          String
  email             String            @unique
  phone             String            @unique
  password          String?
  status            UserStatus        @default(PENDING)
  paidParticipation Boolean           @default(false)
  paidDeposit       Boolean           @default(false)
  paymentMethod     PaymentMethod?
  receiptUrl        String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  roles             Role[]            @relation("UserRoles")
  auctioneerProfile AuctioneerProfile? @relation(fields: [auctioneerProfileId], references: [id])
  auctioneerProfileId String? unique
  bids              Bid[]
  paidParticipationItems AuctionItem[] @relation("ParticipationPaid")
  paidDepositItems  AuctionItem[]     @relation("DepositPaid")
}

model Role {
  id    String     @id @default(uuid())
  name  RoleName   @unique
  users User[]     @relation("UserRoles")
}

model AuctioneerProfile {
  id          String   @id @default(uuid())
  user        User?
  companyName String
  address     String
  tempPassword String?
  auctionItems AuctionItem[]
}

model Category {
  id          String        @id @default(uuid())
  name        String        @unique
  AuctionItem AuctionItem[]
}

model AuctionItem {
  id                   String          @id @default(uuid())
  name                 String
  description          String          @db.Text
  startingPrice        Float
  startDate            DateTime
  endDate              DateTime
  type                 AuctionItemType
  minIncrement         Float?
  maxAllowedValue      Float?
  participationFee     Float?
  securityDeposit      Float?
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  category             Category        @relation(fields: [categoryId], references: [id])
  categoryId           String
  auctioneer           AuctioneerProfile @relation(fields: [auctioneerId], references: [id])
  auctioneerId         String
  images               Image[]
  bids                 Bid[]
  paidParticipationUsers User[]          @relation("ParticipationPaid")
  paidDepositUsers     User[]          @relation("DepositPaid")
}

model Image {
  id            String      @id @default(uuid())
  url           String
  hint          String?
  auctionItem   AuctionItem @relation(fields: [auctionItemId], references: [id], onDelete: Cascade)
  auctionItemId String
}

model Bid {
  id            String      @id @default(uuid())
  amount        Float
  createdAt     DateTime    @default(now())
  bidder        User        @relation(fields: [bidderId], references: [id])
  bidderId      String
  auctionItem   AuctionItem @relation(fields: [auctionItemId], references: [id], onDelete: Cascade)
  auctionItemId String
}

enum UserStatus {
  PENDING
  APPROVED
  BLOCKED
}

enum RoleName {
  BIDDER
  AUCTIONEER
  SUPER_ADMIN
}

enum AuctionItemType {
  LIVE
  SEALED
}

enum PaymentMethod {
  DIRECT
  RECEIPT
}
