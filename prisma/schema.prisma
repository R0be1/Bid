
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum RoleName {
  SUPER_ADMIN
  AUCTIONEER
  BIDDER
}

enum UserStatus {
  PENDING
  APPROVED
  BLOCKED
}

model User {
  id                String     @id @default(uuid())
  firstName         String
  lastName          String
  email             String     @unique
  phone             String     @unique
  password          String
  status            UserStatus @default(PENDING)
  role              RoleName   @default(BIDDER)
  paidParticipation Boolean    @default(false)
  paidDeposit       Boolean    @default(false)
  paymentMethod     String?
  receiptUrl        String?
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt

  auctioneer      Auctioneer?
  bids            Bid[]
  communications  CommunicationLog[]

  @@map("users")
}

model Role {
  id    String   @id @default(cuid())
  name  RoleName @unique
  users User[]   @relation("UserRoles")

  @@map("roles")
}

model AuctionItem {
  id               String    @id @default(cuid())
  name             String
  description      String
  imageUrls        String[]
  imageHints       String[]
  category         Category  @relation(fields: [categoryId], references: [id])
  categoryId       String
  auctioneer       Auctioneer @relation(fields: [auctioneerId], references: [id])
  auctioneerId     String
  type             String // "live" or "sealed"
  startDate        DateTime
  endDate          DateTime
  startingPrice    Float
  participationFee Float?
  securityDeposit  Float?
  currentBid       Float?
  highBidder       String?
  maxAllowedValue  Float? // for sealed bids
  minIncrement     Float? // for live auctions
  bids             Bid[]
  communications   CommunicationLog[]

  @@map("auction_items")
}

model Category {
  id    String @id @default(cuid())
  name  String @unique
  items AuctionItem[]

  @@map("categories")
}

model Auctioneer {
  id        String   @id @default(cuid())
  name      String
  address   String
  status    String // "active" or "inactive"
  userId    String   @unique
  createdAt DateTime @default(now())
  items     AuctionItem[]

  @@map("auctioneers")
}

model Bid {
  id            String      @id @default(cuid())
  amount        Float
  createdAt     DateTime    @default(now())
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  auctionItem   AuctionItem @relation(fields: [auctionItemId], references: [id])
  auctionItemId String

  @@map("bids")
}

model MessageTemplate {
  id        String @id @default(cuid())
  name      String @unique
  channel   String // "email" or "sms"
  template  String

  @@map("message_templates")
}

model CommunicationLog {
  id              String      @id @default(cuid())
  auctionItem     AuctionItem @relation(fields: [auctionId], references: [id])
  auctionId       String
  templateName    String
  channel         String // "email" or "sms"
  recipientsCount Int
  sentAt          DateTime    @default(now())

  @@map("communication_logs")
}

enum RoleName {
  SUPER_ADMIN
  AUCTIONEER
  BIDDER
}

enum UserStatus {
  PENDING
  APPROVED
  BLOCKED
}
