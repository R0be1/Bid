// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String              @id @default(uuid())
  phone             String              @unique
  password          String
  firstName         String
  lastName          String
  email             String              @unique
  status            UserStatus          @default(PENDING)
  paidParticipation Boolean             @default(false)
  paidDeposit       Boolean             @default(false)
  paymentMethod     PaymentMethod?
  receiptUrl        String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  roles             Role[]              @relation("UserRoles")
  bids              Bid[]
  auctioneerProfile AuctioneerProfile?
}

model Role {
  id    String @id @default(uuid())
  name  RoleName @unique
  users User[]   @relation("UserRoles")
}

model AuctioneerProfile {
  id                String              @id @default(uuid())
  companyName       String
  address           String
  tempPassword      String?
  user              User                @relation(fields: [userId], references: [id])
  userId            String              @unique
  auctionItems      AuctionItem[]
  messageTemplates  MessageTemplate[]
  communicationLogs CommunicationLog[]
  categories        Category[]
}

model Category {
  id           String        @id @default(uuid())
  name         String        @unique
  auctionItems AuctionItem[]
  auctioneer        AuctioneerProfile @relation(fields: [auctioneerId], references: [id], onDelete: Cascade)
  auctioneerId      String
}

model AuctionItem {
  id                String          @id @default(uuid())
  name              String
  description       String          @db.Text
  startingPrice     Float
  startDate         DateTime
  endDate           DateTime
  type              AuctionItemType
  minIncrement      Float?
  maxAllowedValue   Float?
  participationFee  Float?
  securityDeposit   Float?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  category          Category        @relation(fields: [categoryId], references: [id])
  categoryId        String
  auctioneer        AuctioneerProfile @relation(fields: [auctioneerId], references: [id], onDelete: Cascade)
  auctioneerId      String
  bids              Bid[]
  images            Image[]
}

model Image {
  id            String      @id @default(uuid())
  url           String
  hint          String
  auctionItem   AuctionItem @relation(fields: [auctionItemId], references: [id], onDelete: Cascade)
  auctionItemId String
}

model Bid {
  id            String      @id @default(uuid())
  amount        Float
  createdAt     DateTime    @default(now())
  bidder        User        @relation(fields: [bidderId], references: [id], onDelete: Cascade)
  bidderId      String
  auctionItem   AuctionItem @relation(fields: [auctionItemId], references: [id], onDelete: Cascade)
  auctionItemId String
}

model MessageTemplate {
  id           String               @id @default(uuid())
  name         String
  channel      CommunicationChannel
  template     String               @db.Text
  auctioneer   AuctioneerProfile    @relation(fields: [auctioneerId], references: [id], onDelete: Cascade)
  auctioneerId String
}

model CommunicationLog {
  id              String               @id @default(uuid())
  auctionId       String
  auctionName     String
  templateName    String
  channel         CommunicationChannel
  recipientsCount Int
  sentAt          DateTime             @default(now())
  auctioneer      AuctioneerProfile    @relation(fields: [auctioneerId], references: [id], onDelete: Cascade)
  auctioneerId    String
}

enum RoleName {
  SUPER_ADMIN
  AUCTIONEER
  BIDDER
}

enum UserStatus {
  PENDING
  APPROVED
  BLOCKED
}

enum PaymentMethod {
  DIRECT
  RECEIPT
}

enum AuctionItemType {
  LIVE
  SEALED
}

enum CommunicationChannel {
  email
  sms
}
