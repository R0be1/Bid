
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

// Models
model User {
  id                String              @id @default(uuid())
  phone             String              @unique
  password          String?
  firstName         String
  lastName          String
  email             String              @unique
  status            UserStatus          @default(PENDING)
  roles             Role[]              @relation("UserRoles")
  auctioneerProfile AuctioneerProfile?
  bids              Bid[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  paidParticipation Boolean             @default(false)
  paidDeposit       Boolean             @default(false)
  paymentMethod     PaymentMethod?
  receiptUrl        String?
  paidParticipationFor AuctionItem[]    @relation("ParticipationPaidUsers")
  paidDepositFor       AuctionItem[]    @relation("DepositPaidUsers")
}

model Role {
  id    String   @id @default(uuid())
  name  RoleName @unique
  users User[]   @relation("UserRoles")
}

model AuctioneerProfile {
  id           String  @id @default(uuid())
  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String  @unique
  companyName  String
  address      String
  tempPassword String?
  items        AuctionItem[]
}

model Category {
  id    String        @id @default(uuid())
  name  String        @unique
  items AuctionItem[]
}

model AuctionItem {
  id                     String          @id @default(uuid())
  name                   String
  description            String
  startingPrice          Float
  currentPrice           Float?
  startDate              DateTime
  endDate                DateTime
  type                   AuctionItemType
  minIncrement           Float?
  maxAllowedValue        Float?
  participationFee       Float?
  securityDeposit        Float?
  auctioneer             AuctioneerProfile @relation(fields: [auctioneerId], references: [id])
  auctioneerId           String
  category               Category        @relation(fields: [categoryId], references: [id])
  categoryId             String
  images                 Image[]
  bids                   Bid[]
  createdAt              DateTime        @default(now())
  updatedAt              DateTime        @updatedAt
  paidParticipationUsers User[]          @relation("ParticipationPaidUsers")
  paidDepositUsers       User[]          @relation("DepositPaidUsers")
}

model Image {
  id            String      @id @default(uuid())
  url           String
  hint          String?
  auctionItem   AuctionItem @relation(fields: [auctionItemId], references: [id], onDelete: Cascade)
  auctionItemId String
}

model Bid {
  id            String      @id @default(uuid())
  amount        Float
  createdAt     DateTime    @default(now())
  bidder        User        @relation(fields: [bidderId], references: [id])
  bidderId      String
  auctionItem   AuctionItem @relation(fields: [auctionItemId], references: [id])
  auctionItemId String
}

// Enums
enum RoleName {
  SUPER_ADMIN
  AUCTIONEER
  BIDDER
}

enum UserStatus {
  PENDING
  APPROVED
  BLOCKED
}

enum AuctionItemType {
  LIVE
  SEALED
}

enum PaymentMethod {
  DIRECT
  RECEIPT
}
